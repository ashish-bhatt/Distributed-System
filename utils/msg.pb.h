// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef PROTOBUF_msg_2eproto__INCLUDED
#define PROTOBUF_msg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace msg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_msg_2eproto();
void protobuf_AssignDesc_msg_2eproto();
void protobuf_ShutdownFile_msg_2eproto();

class Packet;

enum Packet_PacketType {
  Packet_PacketType_CONN_REQ = 0,
  Packet_PacketType_DATA = 1,
  Packet_PacketType_HEART_BEAT = 2
};
bool Packet_PacketType_IsValid(int value);
const Packet_PacketType Packet_PacketType_PacketType_MIN = Packet_PacketType_CONN_REQ;
const Packet_PacketType Packet_PacketType_PacketType_MAX = Packet_PacketType_HEART_BEAT;
const int Packet_PacketType_PacketType_ARRAYSIZE = Packet_PacketType_PacketType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Packet_PacketType_descriptor();
inline const ::std::string& Packet_PacketType_Name(Packet_PacketType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Packet_PacketType_descriptor(), value);
}
inline bool Packet_PacketType_Parse(
    const ::std::string& name, Packet_PacketType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Packet_PacketType>(
    Packet_PacketType_descriptor(), name, value);
}
// ===================================================================

class Packet : public ::google::protobuf::Message {
 public:
  Packet();
  virtual ~Packet();

  Packet(const Packet& from);

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Packet& default_instance();

  void Swap(Packet* other);

  // implements Message ----------------------------------------------

  Packet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Packet& from);
  void MergeFrom(const Packet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Packet_PacketType PacketType;
  static const PacketType CONN_REQ = Packet_PacketType_CONN_REQ;
  static const PacketType DATA = Packet_PacketType_DATA;
  static const PacketType HEART_BEAT = Packet_PacketType_HEART_BEAT;
  static inline bool PacketType_IsValid(int value) {
    return Packet_PacketType_IsValid(value);
  }
  static const PacketType PacketType_MIN =
    Packet_PacketType_PacketType_MIN;
  static const PacketType PacketType_MAX =
    Packet_PacketType_PacketType_MAX;
  static const int PacketType_ARRAYSIZE =
    Packet_PacketType_PacketType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PacketType_descriptor() {
    return Packet_PacketType_descriptor();
  }
  static inline const ::std::string& PacketType_Name(PacketType value) {
    return Packet_PacketType_Name(value);
  }
  static inline bool PacketType_Parse(const ::std::string& name,
      PacketType* value) {
    return Packet_PacketType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .msg.Packet.PacketType pType = 1 [default = DATA];
  inline bool has_ptype() const;
  inline void clear_ptype();
  static const int kPTypeFieldNumber = 1;
  inline ::msg::Packet_PacketType ptype() const;
  inline void set_ptype(::msg::Packet_PacketType value);

  // optional string data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:msg.Packet)
 private:
  inline void set_has_ptype();
  inline void clear_has_ptype();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* data_;
  int ptype_;
  friend void  protobuf_AddDesc_msg_2eproto();
  friend void protobuf_AssignDesc_msg_2eproto();
  friend void protobuf_ShutdownFile_msg_2eproto();

  void InitAsDefaultInstance();
  static Packet* default_instance_;
};
// ===================================================================


// ===================================================================

// Packet

// required .msg.Packet.PacketType pType = 1 [default = DATA];
inline bool Packet::has_ptype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Packet::set_has_ptype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Packet::clear_has_ptype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Packet::clear_ptype() {
  ptype_ = 1;
  clear_has_ptype();
}
inline ::msg::Packet_PacketType Packet::ptype() const {
  // @@protoc_insertion_point(field_get:msg.Packet.pType)
  return static_cast< ::msg::Packet_PacketType >(ptype_);
}
inline void Packet::set_ptype(::msg::Packet_PacketType value) {
  assert(::msg::Packet_PacketType_IsValid(value));
  set_has_ptype();
  ptype_ = value;
  // @@protoc_insertion_point(field_set:msg.Packet.pType)
}

// optional string data = 2;
inline bool Packet::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Packet::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Packet::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Packet::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& Packet::data() const {
  // @@protoc_insertion_point(field_get:msg.Packet.data)
  return *data_;
}
inline void Packet::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:msg.Packet.data)
}
inline void Packet::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:msg.Packet.data)
}
inline void Packet::set_data(const char* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:msg.Packet.data)
}
inline ::std::string* Packet::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:msg.Packet.data)
  return data_;
}
inline ::std::string* Packet::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Packet::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:msg.Packet.data)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::msg::Packet_PacketType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::Packet_PacketType>() {
  return ::msg::Packet_PacketType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_msg_2eproto__INCLUDED
